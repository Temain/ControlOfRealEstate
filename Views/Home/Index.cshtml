@using ControlOfRealEstate.Models.IllegalObjectViewModels;
@{
    ViewData["Title"] = "Система контроля недвижимости";

    var illegalObjectStatuses = ViewBag.IllegalObjectStatuses as List<IllegalObjectStatusViewModel>;
}

<link href="~/lib/alertify.js/themes/alertify.core.css" rel="stylesheet" />
<link href="~/lib/alertify.js/themes/alertify.default.css" rel="stylesheet" />

<div id="loader" class="ui segment main-loader">
    <div class="ui active inverted dimmer">
        <div class="ui indeterminate huge text loader">Загрузка</div>
    </div>
</div>

<div id="mapContainer" style="display: none;">
    <div class="ui horizontal segments map-marks">
        @foreach (IllegalObjectStatusViewModel status in illegalObjectStatuses)
        {
            <a href="#" data-status-id="@status.IllegalObjectStatusId"><img border="0" alt="@status.IllegalObjectStatusName" title="@status.IllegalObjectStatusName" src="@Url.Content("~/images/" + status.IllegalObjectPlacemark)"></a>
        }
    </div>

    @Html.Partial("_LoginPartialFixed")

    <div id="map" style="height: 100vh;"></div>
</div>

@Html.Partial("_GetGeopositionModal")
@Html.Partial("_AddObjectModal")

@section Scripts {
    <script src="https://api-maps.yandex.ru/2.1/?lang=ru_RU" type="text/javascript"></script>
    <script src="~/lib/alertify.js/lib/alertify.js"></script>
    <script type="text/javascript">
        ymaps.ready(init);
        var myMap, myPlacemark, fullScreen = false;

        $(function () {
            // Фильтрация объектов по статусу
            $('.map-marks a').click(function () {
                var statusId = $(this).attr('data-status-id');

                getIllegal(statusId);
            });

            // Добавление нового объекта
            $("#addObjectBtn").click(function () {
                var handler = myMap.events.group();

                $('.coupled.modal')
                    .modal({
                        allowMultiple: false
                    });

                // Модальное окно сохранения нового объекта
                $("#addObjectModal form").form("reset");
                $("#addObjectModal form").form({
                    fields: { description: 'empty' }
                });
                $("#addObjectModal")
                    .modal({
                        closable: false,
                        onHide: function () {
                            getIllegal();
                        },
                        onApprove: function () {
                            var addObjectForm = $(this).find("form");

                            var isValid = addObjectForm.form('is valid');
                            if (!isValid) return false;

                            var values = addObjectForm.form("get values");

                            var url = "/api/illegal/";
                            $.post(url, values)
                                .success(function (response) {
                                    alertify.log("Информация об объекте подана на рассмотрение.");

                                    getIllegal();
                                })
                                .error(function () {
                                    alert('error');
                                });
                        }
                    })
                    .modal('attach events', '#getGeopositionModal .positive.button');

                // Модальное окно выбора объекта
                $("#getGeopositionModal form").form("reset");
                $("#getGeopositionModal form").form({
                    fields: { address: 'empty' }
                });
                $("#getGeopositionModal")
                    .modal({
                        closable: false,
                        dimmerSettings: {
                            opacity: 0
                        },
                        onShow: function () {
                            turnOnAddObjectMode(handler);

                            $(".ui.dimmer.modals").removeClass('dimmer');
                            $('#getGeopositionModal').css('margin-top', 0);
                            $('#getGeopositionModal').css('top', '1em');
                        },
                        onHide: function () {
                            turnOffAddObjectMode(handler);

                            $(".ui.modals").addClass('dimmer');
                        },
                        onDeny: function () {
                            getIllegal();
                        },
                        onApprove: function () {
                            var getGeopositionForm = $(this).find("form");

                            var isValid = getGeopositionForm.form('is valid');
                            if (!isValid) return false;

                            var values = getGeopositionForm.form("get values");
                            var latitude = (coords[0] + '').replace('.', ',');
                            var longitude = (coords[1] + '').replace('.', ',');

                            var addObjectForm = $("#addObjectModal").find("form");
                            addObjectForm.find("#addObjectAddressView").text(values["address"]);
                            addObjectForm.find("#addObjectAddress").val(values["address"]);
                            addObjectForm.find("#addObjectLatitude").val(latitude);
                            addObjectForm.find("#addObjectLongitude").val(longitude);
                        }
                    })
                    .modal("show");
            });
        });

        function init() {
            myMap = new ymaps.Map("map", {
                center: [45.03909376242208, 38.97636406359854], // Краснодар
                zoom: 12,
                controls: [] // ['zoomControl', 'searchControl', 'typeSelector', 'fullscreenControl']
            });

            // Карта во весь экран
            toggle();

            // Показать все застройки
            getIllegal();

            // Показываем загрузчик
            showLoader();
        };

        function toggle() {
            fullScreen = !fullScreen;

            // Добавляем/убираем CSS-класс, определяющий размеры контейнера карты,
            // заданные в абсолютных единицах (300x200 px).
            if (fullScreen) {
                $('#map').removeClass('smallMap');
            } else {
                $('#map').addClass('smallMap');
            }

            myMap.container.fitToViewport();
        };

        function showDistricts() {
            ymaps.geoXml.load('http://neagent.info/xml/ymaps/realty/?1.89').then(
                 function (res) {
                     myMap.geoObjects.add(res.geoObjects);
                 },
                 function (err) { alert('Ошибка обработки запроса'); }
            );
        };

        function getIllegal(statusId) {
            $.ajax({
                type: "GET",
                url: "/api/illegal",
                dataType: "text",
                data: { illegalObjectStatusId: statusId },
                error: function (data) { console.log(data); },
                success: function (data) {
                    myMap.geoObjects.removeAll();

                    var illegalObjects = JSON.parse(data);
                    $.each(illegalObjects, function (index, obj) {
                        var coordinates = [obj.latitude, obj.longitude];
                        var placemark = new ymaps.Placemark(coordinates, {
                            hintContent: obj.address,
                            balloonContent: "<br/>Адрес: " + obj.address + "<br/>Статус: " + obj.statusName + "<br/><br/><a href='/forum/" + obj.illegalObjectId + "' >Обсуждение на форуме</a>"
                        }, {
                            // Опции.
                            // Необходимо указать данный тип макета.
                            iconLayout: 'default#image',
                            // Своё изображение иконки метки.
                            iconImageHref: 'images/' + obj.statusPlacemark,
                            // Размеры метки.
                            iconImageSize: [32, 37]
                        });

                        myMap.geoObjects.add(placemark);
                    });

                    // Показать районы
                    showDistricts();
                }
            });
        };

        function showLoader() {
            setTimeout(function () {
                var loader = $('#loader').find('.loader');
                loader.addClass('disabled');

                $('#loader').hide();
                $('#mapContainer').show();
            }, 1500);
        };

        var objectPlacemark = {};
        var coords = {};
        function turnOnAddObjectMode(handler) {
            myMap.geoObjects.removeAll();
            coords = {};

            var addressFieldInModal = $('#getGeopositionModal #address');
            addressFieldInModal.val('');

            handler.add('click', function (e) {
                coords = e.get('coords');

                // Отправим запрос на геокодирование.
                ymaps.geocode(coords).then(function (res) {
                    var names = [];

                    // Переберём все найденные результаты и
                    // запишем имена найденный объектов в массив names.
                    res.geoObjects.each(function (obj) {
                        names.push(obj.properties.get('name'));
                    });

                    if (names.length) {
                        addressFieldInModal.val('');
                        addressFieldInModal.val(names[0]);

                        myMap.geoObjects.remove(objectPlacemark);

                        // Добавим на карту метку в точку, по координатам
                        // которой запрашивали обратное геокодирование.
                        objectPlacemark = new ymaps.Placemark(coords, {
                            // В качестве контента иконки выведем
                            // первый найденный объект.
                            // iconContent: names[0],
                            // А в качестве контента балуна - подробности:
                            // имена всех остальных найденных объектов.
                            // balloonContent: names.reverse().join(', ')
                        });

                        myMap.geoObjects.add(objectPlacemark, {
                            preset: 'twirl#redStretchyIcon',
                            balloonMaxWidth: '250'
                        });
                    }
                });
            });
        };

        function turnOffAddObjectMode(handler) {
            handler.removeAll();

            // Показать все застройки
            // getIllegal();
        };
    </script>
} 